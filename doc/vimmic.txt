*vimmic.txt*  For Vim version 8.0.  Last change: 2017 Jun 19


		VIMMIC REFERENCE MANUAL    by Charles Gueunet


								*vimmic*
Welcome to VimMic!
VimMic is well-documented, well-commented Vim configuration
along with a set of plugins for the Vim text editor. It stand for Vim Make It
Clever and is aimed to keep this editor light and efficient. It should be easy
to use and understand for anyone who is familiar with Vim.

Using Vimmic:					|vimmic|

1. Beginner's guide        		|vimmic-beginner|
2. Vimmic configuration    		|vimmic-config|
	2.1 Plugins
	2.2 Pre-configuration
	2.3 Post-configuration
3. Plugins configuration   		|vimmic-plugins|
4. Shortcuts               		|vimmic-shortcuts|
	4.1 Leader key
	4.2 Control key
	4.3 Regions / Selection
	4.4 Operators
5. Advanced                		|vimmic-advanced|
	5.1 Snippets
	5.2 C/CPP

General remarks:~
----------------

This configuration is made in order to suit every Vim user's needs. If some
parameters are in conflict with your general Vim usage, please let an issue
on the Github page.

Syntax of this help:~
--------------------

Shortcuts are written inside { }.
Special key are written: <Key>.
-{<Key1>+<Key2>} means that the keys need to be pressed simultaneously.
-{<Key1><Key2>}  means that the keys need to be pressed in sequence.
-{<Key1>/<Key2>} means that depending on your need you can use either Key1 or Key2.
When coming from a plugin, the plugin name is recalled between ( ).

Examples:
-{<Leader>v}: is pressing "<Leader>" then "v".
-{<Ctrl>+f}(`clang-format`,`vim-go`): is pressing "<Ctrl>" and "f" simultaneously. This
shortcut come from "clang-format" or "vim-go".

Note: see |vimmic-shortcuts|.


==============================================================================
1. Beginner's guide				*vimmic-beginner*

When you put your hands on Vimmic for the firsts times, we have made our
possible to help you learn efficiently how to use it.
First, the default leader key is defined on comma {,} (look at |vimmic-config| to change it).
Pressing <leader> three times summon the Visual Shortcut panel, similar to the
SpaceVim one (Cf. Readme file). With this panel, you can explore and learn the
shortcuts defined by Vimmic, then you can repeat them without having to press
<leader> three times. You can see here than the shorcuts are defined with
a mnemonic structure. See the |vimmic-shortcuts| section for more details.

And if you ask, why <leader> needs to be pressed three times, this is because
pressing <leader> twice will help you travel through your text easily:
in normal mode {<leader><leader>w} will let you move quickly to any word
after the cursor and you can use any other motion key than {w}.

Note: There is also a useful pane leading to this doc with {<F12>}

Update:~
-------

Updating from the Git repository can be done with:

`$ git pull --recursive`

Then, you can update all your plugins inside Vim with

`:Update`

This is a good usage to regularly update your plugins inside the editor.


==============================================================================
2. Vimmic configuration 		*vimmic-config*

This configuration is structured as follows:

`$VIMMIC_DIR/`          	Vimmic install directory: Git directory
    `-.vimrc`           	Load Vimmic environment, configuration and plugins
    `-default.toml`     	List of plugins to load
    `-default_ft.toml`  	List of plugins to load on specific file types only

    `-config/`
        `+editor.vim`   	Vim editor parameters (swap, tab, indent...)
        `+shortcuts.vim`	Vim shortcuts and operator (no plugins here)
        `+functions.vim`	Some cool functions to Update, Debug,...
        `+plugins/`     	All plugins configurations (see |vimmic-plugins|)

    `-extra/`           	Example files for customizations

Plugins are managed in `*.toml` files and parameters in `.vimrc.*` files,
see the "extra/" folder for example:

`$VIMMIC_DIR/`
    `-custom.toml`      	Your list of additional plugins
    `-disable.toml`     	Your list of plugins to disable
    `-.vimrc.preconf`   	Some configuration to do 'a priori'
    `-.vimrc.postconf`  	Overwrite Vimmic configuration, add your stuff ...

2.1 Plugins:~
------------

All plugins are added/removed using `*.toml` files.
The `default.toml` and `default_ft.toml`files contains the basics plugins of
this distribution. You can extend this list in a `custom.toml` file looking
like the one in the `extra/` folder, using the syntax described in
|dein-toml|.
You can also disable plugins with the `disable.toml` file using the same syntax.

2.2 Pre-configuration:~
----------------------

The optional `$VIMMIC_DIR/.vimrc.preconf` file allows to
change some configuration that needs to be applied 'a priori',
like shown in the `extra/` folder. For use, you can just copy paste this
sample file and comment / uncomment lines.

It lets you disable some features of the configuration:
- `let g:disable_defaultColors =1`            		"disables all theming colors and words highlight defined
- `let g:disable_highlightWordUnderCursor =1` 		"disables the current word highlight
- `let g:disable_margin =1`                   		"disable the 120 characters margin
- Status line theme related colors
- ...

Also, use this file if you want to change you default leader key.

Note: When this file is changed, you need to restart Vim to apply the
modifications.

2.3 Post-configuration:~
-----------------------

The optional `$VIMMIC_DIR/.vimrc.postconf` file can be used to overwrite
everything defined in Vimmic. A sample version is located under the "extra/"
folder. Whit this file, you can adapt Vimmic to your needs. You can copy here
all your usual `.vimrc` to add features, change colors, remap, etc. You can also
overwrite Vimmic defined configuration.

Note: To configure the plugins you have added, it is better to do it the
Vimmic's way like explained in the next chapter |vimmic-plugins|.


==============================================================================
3. Plugins configuration		*vimmic-plugins*

Plugins configuration files are located on the `config/plugins/` folder, one
file by plugin named `{pluginName}.vim.` These files are automatically loaded by
Vimmic. Each one is structured as follows:

    `" maintainer/name`
    `" Plugin description`

    `[...]`

    `" Settings`
    `""""""""""`
    Variables and other plugin settings here

    `" Shortcut`
    `""""""""""`
    Plugin mapping here

    `" Theme`
    `"""""""`
    Plugin colors here

    `[...]`

All these configurations can be overwritten in the `.vimrc.postconf` (see: |vimmic-config|).
If you want to write your own, use an existing one as template.


==============================================================================
4. Shortcuts            		*vimmic-shortcuts*

Vimmic define a lot of new shortcuts to improve user efficiency. The syntax
used here is described at the top of this help file. Most of these shortcuts
leads repeatable action. In this case, you can recall the last action by
pressing dot {.}.

4.1 Leader key:~
---------------

All these shortcuts are recalled in the visual shortcut pane,
accessible via : {<leader><leader><leader>}
All shorcuts of a same category start by the same sequence.

Window manipulation:~

-{<leader>wv} vertical split
-{<leader>wh} horizontal split
-{<leader>wt} open new tab
-{<leader>wz}(`ZoomWin`) zoom in/out this pane

Buffer manipulation:~

-{<leader>bf} (`CtrlP`) file search and open
-{<leader>bb} (`CtrlP`) buffer search
-{<leader>bm} (`CtrlP`) mix buffer/file search
-{<leader>bt} (`CtrlP`) tag search (current buffer)
-{<leader>bl} (`CtrlP`) line search (current buffer)
-{<leader>bv} (`BufExplorer`) Vertical split with buffer list
-{<leader>bv} (`BufExplorer`) Horizontal split with buffer list

Nerd Tree file explorer:~

-{<leader>nt} (`NERDTree`) Toggle file explorer
-{<leader>nf} (`NERDTree`) Find current file

Git/SVN:~

-{<leader>gt} (`GitGutter/Signify`) Toggle line marks
-{<leader>gp} (`GitGutter`) Go to previous hunk
-{<leader>gn} (`GitGutter`) Go to next hunk
-{<leader>gd} (`GitGutter`) Diff current hunk
-{<leader>gr} (`GitGutter`) Revert current hunk

Syntax checking:~

-{<leader>st} (`ALE`) Toggle error checking
-{<leader>sc} (`ALE`) Check for error again
-{<leader>se} (`ALE`) Error window open `:lopen`
-{<leader>ss} Go to selected error `:ll`
-{<leader>sp} Select previous error `:lprevious`
-{<leader>sn} Select next error `:lnext`

Process Text:~

-{<leader>ps} (`switch.vim`) Toggle value / syntax / mode
-{<leader>ps} (`vim-over`) Substitute search with preview
-{<leader>pr} (`vim-over`) Replace word under cursor with preview
-{<leader>pt} Trailing spaces removal
- see operator *gc*

Align Text:~

-{<leader>a:} (`Tabularize`) Align using :
-{<leader>a&} (`Tabularize`) Align using &
-{<leader>a.} (`Tabularize`) Align using .
-{<leader>a,} (`Tabularize`) Align using ,
-{<leader>a=} (`Tabularize`) Align using =

UI Divers:~

-{<leader>u} (`UndoTree`) Undo tree pane toggle
-{<leader>t} (`TagBar`) Tag bar pane toggl
-{<Leader><Top>} (`BufExplorer`) Show / Change current buffer
-{<Leader>-} fold current { } scope

Motion and highlight:~

-{<Leader><Leader><Move operator>}(`easymotion`) motion with preview on text
-{<Leader><space>} stop highlighting current search
-{<Leader><} go to left tab (> for right tab)

4.2 Control key:~
----------------

Completion:~

-{<Ctrl>+<Space>} Vim completion ( {<Ctrl>+n} )
-{<Ctrl>+xx} Clerver (omni) completion ( {<Ctrl>+x o} )

Other:~

-{<Ctrl>+a}(`delimit-mate`) go out of current scope ( {}, [], "", (),...)
-{<Ctrl>+r}(`vim-over`) on visual selection, replace word
-{<Ctrl>+j/k} drag current line / selection

File specific:~

-{<Ctrl>+f}(`clang-format`,`vim-go`) format c/cpp/go code, see |vimmic-advanced|
-{]]}(`vimtex`) close current block in Latex

4.3 Regions / Selection:~
------------------------

You can test these by using visual selection: {v i/a <region>}
Using {<+>/<->}(`expand-region`) grow or dim current selection

-`L`  current line
-`n{` next "{ }" block
-`, `(`vim-textobj-parameter`) function parameter
-`i `(`vim-textobj-indent`) current indentation level
-`f` (`vim-textobj-function`) current function (C, CPP, Java, Vim)
-`e` (`vim-textobj-entire`) the entire document

You can drag the current line / selection using {<Ctrl>j/k}

4.4 Operators:~
--------------

-{gc} (`vim-commentary`): toggle comment ( {gcai} comment current indentation level )
-{ga} (`place.vim`): make change without moving the cursor (one char)
-{gb} (`place.vim`): make change without moving the cursor (multi char)
-{ys} (`delimitMate`): {ys<Region><Delimiter>} put delimiter around region ( `{ysiw]}` put current word inside brackets )
-{ds} (`delimitMate`): {ds<Delimiter>} remove delimiter around region
-{cs} (`delimitMate`): {cs<Delimiter><Delimiter>} remove delimiter around region

==============================================================================
5. Advanced             		*vimmic-advanced*

5.1 Snippets:~
-------------

Snippets are parametrized pieces of code that you can expand with <Tab>. An
example in C, typing: `fori<Tab>` will create `for(int i=0; i<val; i++){}` and
will let you change the `val`, the `i` and the `0`. It is a time saver
mechanism that can be useful to avoid some mistakes like incrementing the bad
variable in the for loop.

Snippets are defined on files called `{filetype}.snippets`. These files are
located inside the `snippets/` folder of their plugins.
Some examples are:
-`dein/repos/github.com/honza/vim-snippets/snippets/sh.snippets`                for shell
-`dein/repos/github.com/GuillaumeFavelier/vim-snipmate-snippets/snippets/cpp_std.snippets`  for c++

If you want to add your custom snippets, create:
-`snippets/{filetype}.snippets`
in the root of the vimmic configuration.
The syntax for the file is described in |snipmate-syntax|.

5.2 C/CPP:~
----------

You can use `clang-format` inside of this Vim ( `{<Ctrl>+f}` ) if you have
python enabled, which can be checked using `$ vim --version | grep python` .
Clang-format will look for a `.clang-format` file to use on the project
folder and all its parents until root. An example of such a file is given in the
`extra/` folder of this conf. The options are explained at:
"https://clang.llvm.org/docs/ClangFormatStyleOptions.html".
Note: Be careful of your clang version as unknown option will discard the code formatting with an error.

To benefits from clever completion and error checking, you need to provide the
right compilation options to Vimmic. This is done using a `.vimmic_config`
file, at the root of you project. This file contains the compile options,
one per line as explained for |g:clang_dotfile| (simple exemple int the
`extra/` folder).
If you have a project using CMake, setting the `CMAKE_EXPORT_COMPILE_COMMAND`
allows you to create a `compile_commands.json`. Then, you can create the
`.vimmic_config` file by using the `extra/vimmic_cpp_config.sh` script.

Exemple:
>
   ~/.vimmic/extra/vimmic_cpp_config.sh build/compile_commands.json > .vimmic_config
   echo "-std=c++11" >> .vimmic_config
>
